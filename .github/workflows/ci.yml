name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Frontend tests and build
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format -- --check

      - name: Type check
        run: npx tsc --noEmit

      - name: Unit tests
        run: npm run test

      - name: Build
        run: npm run build

      - name: E2E tests
        run: npx playwright install --with-deps && npm run test:e2e
        env:
          CI: true

  # Backend tests
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: api/requirements.txt

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with Ruff
        run: ruff check .

      - name: Format check with Ruff
        run: ruff format --check .

      - name: Type check with mypy
        run: mypy . --ignore-missing-imports

      - name: Run tests
        run: pytest -v
        env:
          REDIS_URL: redis://localhost:6379

  # Workers tests
  workers:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: workers

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: workers/requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Test orchestrator
        run: python orchestrator.py
        env:
          REDIS_URL: redis://localhost:6379

  # Docker build test
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f infra/Dockerfile.frontend -t dreamquest-frontend .
          docker build -f infra/Dockerfile.api -t dreamquest-api .
          docker build -f infra/Dockerfile.worker -t dreamquest-worker .

      - name: Test docker-compose
        run: |
          docker-compose -f infra/docker-compose.dev.yml up -d
          sleep 10
          docker-compose -f infra/docker-compose.dev.yml down
